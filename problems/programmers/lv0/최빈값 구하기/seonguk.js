function solution(array) {
  // 1,2,3,3,3,4
  const arr = array.sort((a, b) => a - b); // 오름차순 정렬
  let before = -1; // 시작값 1
  let cnt = 0; // 빈도수 0
  let maxCnt = 0; // 최대 빈도수 0
  let max = -1; // 최빈값 0
  let isDup = false;

  for (let i = 0; i < arr.length; i++) {
    // 1, 1, 2, 2
    before !== arr[i] ? (cnt = 1) : (cnt += 1);

    if (cnt === maxCnt) {
      if (max !== arr[i]) {
        isDup = true;
      }
    }

    if (cnt > maxCnt) {
      max = array[i];
      maxCnt = cnt;
      isDup = false;
    }

    before = arr[i];
  }

  return isDup ? -1 : max;
}

// 배열 array 를 받아 처음에 오름차순 정렬을 한 arr 배열을 생성해줍니다. 후에 시작값, 빈도수, 최대 빈도수, 최빈값, 중복여부에 관한 변수들을 선언합니다. 시작값과 최빈값이 -1인 이유는 array 의 범위가 0 ≤ array의 원소 < 1000 이기에 0 보다 작은 -1을 사용하였다.

// 먼저 배열 전체를 순환해야 하기에 for문을 사용하여 순환할 수 있도록 설계하였고, 먼저 이전값과 현재값을 비교하게 하여 이전값과 같으면 빈도수에 1을 증가하고 다를 경우 빈도수가 1로 초기화 시켜주었다.

// 다음은 현재 값의 빈도수와 최대 빈도수를 비교하여 같을 경우, 현재 값과 최빈값이 다른지 여부를 조회하여, 다를 경우 중복되었기에 중복여부를 true 로 설정하였다.

// 다음은 현재 값의 빈도수가 기존 최대 빈도수보다 클 경우이다. 클 경우 최빈값은 현재값으로 변경되며, 최대 빈도수도 현재 빈도수로 변경된다. 그리고 중복여부도 false 로 설정된다.

// 앞선 과정을 거친 후 다음값 비교를 위해 현재값을 이전값에 대입한다.

// 배열 순환을 마치고, 중복여부에 따라 중복되면 -1 을, 아니면 최빈값을 출력하게 된다.
