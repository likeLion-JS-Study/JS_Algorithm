// 문제
/* 
셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.

양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다. 

예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.

33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...

n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다. 

생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97

10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.
*/

let newArray = [];
// 입력값이 주어지지 않으므로 새로운 배열을 생성한다.
let result = [];
// 결과값의 형태를 배열로 나타나게끔 만들어준다.

for (let i = 1; i <= 10000; i++) {
  // 문제에서 처럼 d(N)의 값이 10000 되지 않도록 설정해준다.
  // 처음에 들어올 값은 1이므로 let i = 1이라고 초기값을 지정해준다.
  // 값이 만족한다면 아래의 코드 블록을 반복한다.
  let dN = 0;
  // dN의 값을 선언하여 할당한다.
  let stringNumber = String(i);
  // index 번호를 문자열로 정의한다.
  for (let j = 0; j <= stringNumber.length; j++) {
    // dN의 초기값을 0이라고 정해주고 문자열의 숫자의 길이가 j보다 크거나 같도록 명시해주고 후증가시킨다.
    dN += Number(stringNumber[j]);
    // 복합 할당 연산자를 이용하여 자연수 j의 값을 dN에 할당해준다.
    // 값이 만족하는 한 반복되어 나타난다.
  }
  let nNum = i + dN;
  // dN의 숫자를 i값과 dN의 값을 더한 것으로 할당한다.
  newArray.push(nNum);
  // nNum로 나온 수들을 newArray 배열로 푸시한다.
}

for (let i = 1; i <= 10000; i++) {
  if (newArray.indexOf(i) === -1) {
    //  newArray 배열에서 특정 지정된 요소 i를 찾아 첫 번째 인덱스를 반환하고, 그 것이 존재하지 않으면 -1을 반환한다.
    result += i + "\n";
    // 복합 할당 연산자를 이용하여 i의 값을 줄바꿈하여 나타나게끔 result 값을 설정한다.
    // 해당 반복문은 조건이 만족하는 한 지속된다.1
  }
}

console.log(result);
